/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.plataforma_creacion.Fronted.UI;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author benjamin
 */
public class FramePrincipal extends javax.swing.JFrame {

    private String currentFile = "";
    private boolean cambios = false;

    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        editorTexto = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelLinea = new javax.swing.JLabel();
        labelColumna = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        AbrirArchivo = new javax.swing.JMenuItem();
        NuevoArchivo = new javax.swing.JMenuItem();
        GuardarArchivo = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        EliminarArchivo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        editorTexto.setColumns(20);
        editorTexto.setRows(5);
        editorTexto.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        editorTexto.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                editorTextoCaretUpdate(evt);
            }
        });
        editorTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                editorTextoKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(editorTexto);

        jLabel1.setText("Ubicacion:");

        jLabel2.setText("Linea:");

        jLabel3.setText("Columna:");

        labelLinea.setText("0");

        labelColumna.setText("0");

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder("Errores"));
        jScrollPane3.setViewportView(jTextArea2);

        jMenu1.setText("Archivo");

        AbrirArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        AbrirArchivo.setText("Abrir");
        AbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(AbrirArchivo);

        NuevoArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        NuevoArchivo.setText("Nuevo");
        NuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(NuevoArchivo);

        GuardarArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        GuardarArchivo.setText("Guardar");
        GuardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(GuardarArchivo);

        jMenuItem1.setText("Cerrar Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        EliminarArchivo.setText("Eliminar");
        EliminarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(EliminarArchivo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edicion");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Pegar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("Copiar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem6.setText("Cortar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Codigo");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem7.setText("Analizar");
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelLinea)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelColumna)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(labelLinea)
                    .addComponent(labelColumna))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        this.editorTexto.copy();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void AbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirArchivoActionPerformed
        // TODO add your handling code here:
        if (this.currentFile.isEmpty()) {
            if (!this.editorTexto.getText().isEmpty()) {
                int option = JOptionPane.showConfirmDialog(this, "Desea guardar el texto del editor");
                switch (option) {
                    case JOptionPane.YES_OPTION:
                        this.nuevoArchivo(this.editorTexto.getText());
                        this.editorTexto.setText(null);
                        this.abrirArchivo();
                        break;
                    case JOptionPane.NO_OPTION:
                        this.editorTexto.setText(null);
                        this.abrirArchivo();
                        break;
                    default:
                        /*do nothing*/
                        break;
                }
            } else {
                this.abrirArchivo();
            }
        } else {
            if (cambios == true) {
                int option = JOptionPane.showConfirmDialog(this, "Desea guardar los cambios efectuados en el archivo?");
                switch (option) {
                    case JOptionPane.YES_OPTION:
                        this.guardarArchivo();
                        this.editorTexto.setText(null);
                        this.abrirArchivo();
                        break;
                    case JOptionPane.NO_OPTION:
                        this.editorTexto.setText(null);
                        this.abrirArchivo();
                        break;
                    default:
                        /*do nothing*/
                        break;
                }
            } else {
                this.editorTexto.setText(null);
                this.abrirArchivo();
            }
        }
    }//GEN-LAST:event_AbrirArchivoActionPerformed

    private void abrirArchivo() {
        InputStreamReader isr = null;
        BufferedReader in = null;
        String code = null;
        String outputString = "";

        JFileChooser fileChooser = new JFileChooser(".");
        FileFilter filtro = new FileNameExtensionFilter("Archivos (.gcic)", "gcic");

        fileChooser.setFileFilter(filtro);

        int valor = fileChooser.showOpenDialog(fileChooser);
        if (valor == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile().getAbsolutePath();
            this.setTitle(fileChooser.getSelectedFile().getName());
            try {
                isr = new InputStreamReader(new FileInputStream(new File(currentFile)));
                in = new BufferedReader(isr);
                while ((code = in.readLine()) != null) {
                    outputString = outputString + code + "\n";
                }

                this.editorTexto.setText(outputString);

            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "El archivo no es encontrado por el programa", "Seleccion de Archivo", JOptionPane.WARNING_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "No es posible hacer lectura del archivo", "Seleccion de Archivo", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No selecciono nigun archivo", "Seleccion de Archivo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void editorTextoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_editorTextoCaretUpdate
        // TODO add your handling code here:
        JTextArea editArea = (JTextArea) evt.getSource();
        int linea = 1;
        int columna = 1;
        try {
            int caretpos = editArea.getCaretPosition();
            linea = editArea.getLineOfOffset(caretpos);
            columna = caretpos - editArea.getLineStartOffset(linea);

            // Ya que las líneas las cuenta desde la 0
            linea += 1;
            if (columna == 0) {
                columna = 1;
            }
            labelLinea.setText(String.valueOf(linea));
            labelColumna.setText(String.valueOf(columna));

        } catch (Exception ex) {
            System.out.println("Error el recuperar la ubicacion en el panel de texto");
        }
    }//GEN-LAST:event_editorTextoCaretUpdate

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.editorTexto.cut();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        this.editorTexto.paste();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void GuardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarArchivoActionPerformed
        // TODO add your handling code here:
        if (!this.currentFile.isEmpty()) {
            this.guardarArchivo();
        } else {
            if (!this.editorTexto.getText().isEmpty()) {
                int option = JOptionPane.showConfirmDialog(this, "Desea guardar el texto del editor?");
                switch (option) {
                    case JOptionPane.YES_OPTION:
                        this.nuevoArchivo(this.editorTexto.getText());
                        break;
                    default:
                        /*do nothing*/
                        break;
                }
            }
        }
    }//GEN-LAST:event_GuardarArchivoActionPerformed

    private void guardarArchivo() {
        try (FileWriter fw = new FileWriter(this.currentFile, false)) {
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(this.editorTexto.getText());
            bw.close();
            this.cambios = false;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No es posible guardar el archivo", "Guardado", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
    }
    private void editorTextoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorTextoKeyTyped
        // TODO add your handling code here:
        this.cambios = true;
    }//GEN-LAST:event_editorTextoKeyTyped

    private void NuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoArchivoActionPerformed
        // TODO add your handling code here:
        this.nuevoArchivo(this.editorTexto.getText());
    }//GEN-LAST:event_NuevoArchivoActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (!this.currentFile.isEmpty()) {
            if (cambios == true) {
                int option = JOptionPane.showConfirmDialog(this, "Desea guardar los cambios efectuados en el archivo?");
                switch (option) {
                    case JOptionPane.YES_OPTION:
                        this.guardarArchivo();
                        this.setTitle(null);
                        this.editorTexto.setText(null);
                        this.currentFile = "";
                        break;
                    case JOptionPane.NO_OPTION:
                        this.setTitle(null);
                        this.editorTexto.setText(null);
                        this.currentFile = "";
                        break;
                    default:
                        /*do nothing*/
                        break;
                }
            } else {
                this.setTitle(null);
                this.editorTexto.setText(null);
                this.currentFile = "";
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void EliminarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarArchivoActionPerformed
        // TODO add your handling code here:
        if (!this.currentFile.isEmpty()) {
            File fichero = new File(this.currentFile);
            if (JOptionPane.showConfirmDialog(this, "Desea eliminar el archivo \"" + fichero.getName() + "\"", "Eliminar Archivo", JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                if (fichero.delete()) {
                    JOptionPane.showMessageDialog(this, "El archivo ha sido borrado satisfactoriamente");
                    this.currentFile = "";
                    this.setTitle(null);
                    this.editorTexto.setText(null);
                } else {
                    JOptionPane.showMessageDialog(this, "El archivo no puede ser borrado", "Error", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_EliminarArchivoActionPerformed
    private void nuevoArchivo(String text) {
        JFileChooser file = new JFileChooser();
        FileFilter filtro = new FileNameExtensionFilter("Archivos (.gcic)", "gcic");
        file.setFileFilter(filtro);
        file.showSaveDialog(this);

        File recuperacion = file.getSelectedFile();
        if (recuperacion != null) {
            try {
                recuperacion = new File(recuperacion.getAbsolutePath());
                if (recuperacion.exists()) {
                    JOptionPane.showMessageDialog(this, "Ya existe un archivo con el nombre dado", "Información", JOptionPane.WARNING_MESSAGE);
                } else {
                    recuperacion = new File(recuperacion.getAbsolutePath() + ".gcic");
                    if (recuperacion.exists()) {
                        JOptionPane.showMessageDialog(this, "Ya existe un archivo con el nombre dado", "Información", JOptionPane.WARNING_MESSAGE);
                    } else {
                        FileWriter save = new FileWriter(recuperacion.getAbsolutePath());
                        save.write(text);
                        save.close();
                        this.currentFile = recuperacion.getAbsolutePath();
                        this.setTitle(recuperacion.getName());
                        JOptionPane.showMessageDialog(this, "El archivo se a guardado Exitosamente", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error el guardar el archivo", "Información", JOptionPane.WARNING_MESSAGE);
            }

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirArchivo;
    private javax.swing.JMenuItem EliminarArchivo;
    private javax.swing.JMenuItem GuardarArchivo;
    private javax.swing.JMenuItem NuevoArchivo;
    private javax.swing.JTextArea editorTexto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel labelColumna;
    private javax.swing.JLabel labelLinea;
    // End of variables declaration//GEN-END:variables
}
